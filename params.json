{"name":"PrimCom","tagline":"manage and access your personal knowledge base easily","body":"# PrimCom\r\n\r\nPrimCom is a personal _knowledge base manager_, primarily made for programmers. It is meant to be running in a terminal, thus you can access and consult it quickly while working.\r\n\r\n### Motivation\r\n\r\nThere are lots of code snippets that I use often but I couldn't reproduce them easily by heart. When I need\r\nsuch a piece of code, either I look it up on my blog (if I had written about it), or Google it. When I see the code, I remember it and I can modify it to my needs. However, looking up something on the Internet can take time (at least 30-60 seconds).\r\n\r\nWith PrimCom you can collect _your own code snippets_ with _your own examples_. You can assign tags to them and find them easily later. PrimCom can perform two main actions: print the content of a file, or open a web page.\r\n\r\nPrimCom has several useful features. It has tab completion; it can copy the content of a file to the clipboard; it can syntax highlight your code snippets; it even has a built-in radio player, etc. See the built-in help for a detailed list.\r\n\r\n### Quick start\r\n\r\nOpen a terminal with _dark_ background and launch it:\r\n\r\n    $ ./h.py\r\n\r\nIf you prefer light background, use the `light()` command or modify directly the `config.py` file.\r\n\r\nType `h` for help, `d` for the list of available tags.\r\n\r\n### Screenshots\r\n\r\nWith dark background:\r\n![dark background](https://dl.dropboxusercontent.com/u/144888/wordpress/20130802-PrimCom/pc01.png)\r\n\r\nWith light background:\r\n![light background](https://dl.dropboxusercontent.com/u/144888/wordpress/20130802-PrimCom/pc02.png)\r\n\r\n### Requirements\r\n\r\nThe project was developed under Ubuntu GNU/Linux with Python 2.7. It is suggested that you install the following packages (via apt-get):\r\n* python-pygments (for syntax highlighting)\r\n* xsel (for copying to the clipboard)\r\n* mplayer2 (for the radio)\r\n* python-psutil (for process manipulation)\r\n\r\n\r\n***\r\n\r\n## Details\r\n\r\nThe description above should be enough to get started. Now let's see the details...\r\n\r\n### Starting PrimCom\r\n\r\nHere I suppose you extracted PrimCom to your HOME directory in this folder: `~/primcom`. Enter this directory and launch `h.py` or `start.sh`:\r\n\r\n    $ cd\r\n    $ cd primcom\r\n    $ ./h.py\r\n\r\nAnother way is to call it from a shell script. To avoid problems, the launcher script should enter `~/primcom`:\r\n\r\n    # ~/bin/h\r\n    cd ~/primcom\r\n    ./h.py\r\n\r\nI call the script `h` and it's in my `~/bin` folder (where `~/bin` is in my `PATH`). This way I can launch PrimCom from anywhere with the \"command\" `h`.\r\n\r\n[The project's first name was \"Help Project\", hence the file name `h.py`. Later I renamed it to PrimCom.]\r\n\r\n### Quit\r\n\r\nCTRL+C and CTRL+D work. With `q` you can step back one level (if you are on the main level, you will quit from the application). The command `qq` terminates the application whichever level you are on.\r\n\r\n### Basic usage\r\n\r\nOK, now we have PrimCom running. With `h` you can access the built-in help. The most important command is `d` (from the word \"dir\") that lists all the tags. PrimCom treats two kinds of entries: (1) a note (code snippet), that is stored in a file, and (2) a link to a webpage. In the list of tags, the two kinds of entries are numbered with different colors. The \"`...`\" at the end of a tag means that this tag is assigned to at least two entries, thus you will have to select from an interactive list.\r\n\r\nWhen you enter the number of a tag in the prompt, you will get the corresponding entry. It can be the content of a file, or you can be redirected to a webpage if it was a link. File contents are syntax highlighted according to the file's extension.\r\n\r\nAt the prompt you can enter keyword(s) too. Try for instance \"url\". You will get a list of entries that contain the given keyword(s). Select a number to get the content of the entry.\r\n\r\n### Database\r\n\r\nAt this point you may wonder where and how the entries are stored. They are in the `data` folder and they are categorized. For instance, `python.json` contains the description of the entries that are stored in the `python` folder. The descriptions are in JSON format and they look like this:\r\n\r\n    \"ed50c8b6773a92bf0632c6d4\": {\r\n        \"doc\": \"remove a substring from the end of a string\",\r\n        \"meta\": {\r\n            \"date\": \"20130802_002744\"\r\n        },\r\n        \"action\": [\r\n            \"cat\",\r\n            \"python/strip_end.py\"\r\n        ],\r\n        \"tags\": [\r\n            \"rstrip\",\r\n            \"lstrip\"\r\n        ],\r\n        \"extra\": []\r\n    }\r\n\r\n* the long hexa number is a unique ID and it is generated automatically\r\n* doc: a textual description of the entry\r\n* meta/date: creation date and time (old: `yyyymmdd`; new: `yyyymmdd_hhmmss`)\r\n* action: it can be \"cat\" (print the content of the given file), or \"open_url\" (open a webpage)\r\n* tags: list of tags\r\n* extra: extra operations. There is only one operation implemented here (\"`cb()`\"), which copies the content of a file to the clipboard right after it was printed to the standard output.\r\n\r\nThe file `urls.json` contains the webpage links and it has no corresponding subfolder. Do not rename this file, its name is hardwired in the source.\r\n\r\nDo not edit these JSON files manually if you want to add a new entry. There is a dedicated script for this task, see the next subsection.\r\n\r\n### Adding a new entry\r\n\r\nIf you want to add a new entry, launch the command `add()`. PrimCom has tab completion too, thus you can type `ad<TAB>`. It will launch the script `add_item.py`:\r\n* doc: give a short description\r\n* action: do you want to print the content of a file or open a URL? \r\n** If you chose \"c\" (cat), then select a category or create a new category. Then provide a filename (just a filename without any path).\r\n** If you chose \"o\" (open_url), enter the URL.\r\n* tags: provide one or more keywords, separated by comma\r\n* At the end you can open the file and fill its content.\r\n\r\nLet's see a concrete example. We want to create a new category for C++ and we want to add the classic \"hello world\" example:\r\n\r\n    pc> add()\r\n    doc: hello world in C++\r\n    action: (c)at or (o)pen_url [c/o]? c\r\n    Choose category:\r\n    [1] python\r\n    [2] text\r\n    [3] shell\r\n    [n] new...\r\n    [q] quit\r\n    ~~> n\r\n    New DB: cpp\r\n      filename: hello.cpp\r\n    tags: hello world\r\n    # added to cpp.json\r\n    # data/cpp/hello.cpp touched\r\n    Do you want to edit data/cpp/hello.cpp [y/n] (default: yes)?\r\n\r\n### Editing an entry\r\n\r\nWhile using PrimCom, you may want to edit the description of an entry and/or the content of a file. For this you don't need to quit PrimCom. First select the entry, i.e. print it to the screen. Then you can use these commands:\r\n* `edit()`: edit the content of the file\r\n* `jet()`: edit the JSON description (\"jet()\" stands for \"json edit this\"). If you chose this one, then DO NOT MODIFY the long hexa ID!\r\n\r\nAlternatives: `this.edit()`, `this.jet()`.\r\n\r\n### Editing the whole JSON file\r\n\r\nIn the previous subsection we saw how to edit the JSON description of one entry. But what if you want to view/edit the whole JSON database?\r\n\r\nAgain, select an entry, i.e. print it to the screen. Then use one of these commands:\r\n* json.view()\r\n* json.edit()\r\n\r\nExample: you selected \"1\", which is in \"python.json\". Thus, \"json.edit()\" will open \"python.json\" for editing.\r\n\r\n### Entry info\r\n\r\nWhen you have lots of tags, you may forget what entries they mean. In this case you can print the JSON description of an entry with the command `<NUM>.json`, e.g. `3.json`.\r\n\r\n### Copy to clipboard\r\n\r\nIf you collect your code snippets with PrimCom, you might want to copy them to the clipboard. When you selected an entry, you can use these options:\r\n* `cb()`: copy the content of the file to the clipboard\r\n* `gedit()`: open the file with gedit, then copy just a part of it from gedit and paste it wherever you want\r\n\r\n### Follow URLs\r\n\r\nSome textual entries may include URLs. It would be great if you could visit them easily. Well, you can. Just use the command `links()` and select the URL you want to open.\r\n\r\n### Light background, dark background\r\n\r\nYou can adjust the colors of PrimCom to light background and dark background with the commands `light()` and `dark()`, respectively. The default is dark, but you can change it easily in `config.py`.\r\n\r\n### Special commands\r\n\r\nThe list of special commands can be listed with `commands()`:\r\n\r\n    pc> commands()\r\n    Available commands:\r\n    -------------------\r\n    pymotw:     - open on PyMOTW, e.g. pymotw:atexit\r\n    go:         - Google search list\r\n    go1:        - open first google hit\r\n    imdb:       - open on IMDb\r\n    youtube:    - open on YouTube\r\n    wp:         - open on wikipedia\r\n    lib:        - look up in Python 2 Standard Library\r\n    lib3:       - look up in Python 3 Standard Library\r\n    shorten:    - shorten URL\r\n\r\nGeneral form: `<command>:<keyword(s)>`, e.g. `imdb:star wars V`.\r\n\r\nSome other useful commands:\r\n* `myip()`: your public IP address\r\n* `reddit()`: open your favourite subreddit easily\r\n\r\n### Radio\r\n\r\nYou can start the radio with the command `radio()`. Just select a channel. You can stop the current channel with `mute()`. Quitting PrimCom shuts down the radio.\r\n\r\n### Pid checker\r\n\r\nIt can happen that you launch a program that takes too much time to finish. You don't want to sit next to your machine but you would like to get some audio notification when the program is done. PrimCom's pid checker can monitor a process and play a sound when the process terminates.\r\n\r\nExample: launch the command \"yes\" in a terminal window. In PrimCom execute the command `pid()`. Press \"2\" to adjust the audio volume. With \"ps\" list processes and find out the PID of \"yes\". Say it's 5219. With \"m\" you can always print the mini menu. Start monitoring \"yes\" with the command \"`add:5219`\". With \"d\" you can list the monitored processes. Now stop \"yes\" in the other terminal. A few seconds later you should hear the audio alert. Under Ubuntu you should also see a notification in the top right corner of the screen.\r\n\r\n### Project structure\r\n\r\nNow let's see the structure of the project:\r\n* `h.py`: main file\r\n* `edit.sh`: edit `h.py`; `start.sh`: launch `h.py`\r\n* `add_item.py`: add a new item. It can be launched from PrimCom too with the command `add()`.\r\n* `config.py`: configuration file. Editor, colors, etc. can be customized here.\r\n* `assets` dir.: static files (audio, logo, etc)\r\n* `data` dir.: databases are here\r\n* `lib` dir.: own and 3rd party libraries\r\n* `modules` dir.: extra features of the application (radio, pid checker)\r\n* `tmp` dir.: database backups. Do not delete this directory.\r\n\r\n### Contact\r\n\r\nPrimCom was written by Laszlo Szathmary, alias Jabba Laci. You can contact me at [jabba.laci@gmail.com](mailto:jabba.laci@gmail.com). Feedbacks are appreciated.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}